name: MLOps Pipeline CI/CT/CD

on:
  push: { branches: ["main"] }
  pull_request: { branches: ["main"] }

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest
      - name: Lint
        run: |
          flake8 mlops_pipeline/scripts --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 mlops_pipeline/scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test
        run: |
          pytest || (if [ $? -eq 5 ]; then echo "No tests found"; exit 0; else exit $?; fi)

  build-and-train:
    needs: ci-checks
    runs-on: ubuntu-latest
    env:
      # บังคับให้ใช้ local file backend ใน runner (จะเขียนไว้ใน ./mlruns)
      MLFLOW_TRACKING_URI: file:./mlruns
      MLFLOW_ARTIFACT_URI: ./mlruns
      # ตั้งชื่อ experiment เฉพาะใน CI เพื่อไม่ไปชนของเครื่องคุณ
      EXPERIMENT_NAME: cifar10-ci
      FAST_DEV: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Data Validation
        run: python mlops_pipeline/scripts/01_data_validation.py
      - name: Preprocess
        id: prep
        run: python mlops_pipeline/scripts/02_data_preprocessing.py
      - name: Train + Evaluate + Register
        run: python mlops_pipeline/scripts/03_train_evaluate_register.py ${{ steps.prep.outputs.run_id }} 0.85
      - name: Upload mlruns (local tracking)
        uses: actions/upload-artifact@v4
        with:
          name: mlruns
          path: mlruns/
